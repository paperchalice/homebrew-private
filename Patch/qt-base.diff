--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -47,7 +47,6 @@ function(qt_internal_check_if_path_has_symlinks path)
             cd $(realpath <path>) before invoking cmake <source_dir>.")
     endif()
 endfunction()
-qt_internal_check_if_path_has_symlinks("${CMAKE_BINARY_DIR}")
 
 # Run auto detection routines, but not when doing standalone tests. In that case, the detection
 # results are taken from either QtBuildInternals or the qt.toolchain.cmake file. Also, inhibit
--- a/cmake/FindGSSAPI.cmake
+++ b/cmake/FindGSSAPI.cmake
@@ -17,7 +17,6 @@ find_library(GSSAPI_LIBRARIES
              GSS # framework
              gss # solaris
              gssapi # FreeBSD
-             gssapi_krb5
              HINTS ${PC_GSSAPI_LIBDIR}
 )
 
--- a/cmake/FindWrapZSTD.cmake
+++ b/cmake/FindWrapZSTD.cmake
@@ -28,7 +28,7 @@ include(FindPackageHandleStandardArgs)
 if(TARGET zstd::libzstd_static OR TARGET zstd::libzstd_shared)
     find_package_handle_standard_args(WrapZSTD
                                       REQUIRED_VARS zstd_VERSION VERSION_VAR zstd_VERSION)
-    if(TARGET zstd::libzstd_static)
+    if(OFF)
         set(zstdtargetsuffix "_static")
     else()
         set(zstdtargetsuffix "_shared")
--- a/src/corelib/global/qlibraryinfo.cpp
+++ b/src/corelib/global/qlibraryinfo.cpp
@@ -365,6 +365,9 @@ static QString getRelocatablePrefix(QLibraryInfoPrivate::UsageMode usageMode)
     const QString prefixDir = QString(libDirCFString) + "/" QT_CONFIGURE_LIBLOCATION_TO_PREFIX_PATH;
 
     prefixPath = QDir::cleanPath(prefixDir);
+    if (prefixPath.startsWith("/usr/local/Cellar/qt-base/")) {
+        prefixPath = "/usr/local";
+    }
 #elif QT_CONFIG(dlopen)
     Q_UNUSED(usageMode);
     Dl_info info;
--- a/src/gui/configure.cmake
+++ b/src/gui/configure.cmake
@@ -28,7 +28,7 @@ set_property(CACHE INPUT_libpng PROPERTY STRINGS undefined no qt system)
 
 
 #### Libraries
-qt_set01(X11_SUPPORTED LINUX OR HPUX OR FREEBSD OR NETBSD OR OPENBSD OR SOLARIS) # special case
+qt_set01(X11_SUPPORTED APPLE OR LINUX OR HPUX OR FREEBSD OR NETBSD OR OPENBSD OR SOLARIS OR HURD) # special case
 qt_find_package(ATSPI2 PROVIDED_TARGETS PkgConfig::ATSPI2 MODULE_NAME gui QMAKE_LIB atspi)
 qt_find_package(DirectFB PROVIDED_TARGETS PkgConfig::DirectFB MODULE_NAME gui QMAKE_LIB directfb)
 qt_find_package(Libdrm PROVIDED_TARGETS Libdrm::Libdrm MODULE_NAME gui QMAKE_LIB drm)
--- a/cmake/FindWrapOpenGL.cmake
+++ b/cmake/FindWrapOpenGL.cmake
@@ -33,6 +33,10 @@ if (OpenGL_FOUND)
             set(__opengl_fw_path "-framework OpenGL")
         endif()
 
+        if(OPENGL_gl_LIBRARY MATCHES dylib)
+            set(__opengl_fw_path OpenGL::GL)
+        endif()
+
         find_library(WrapOpenGL_AGL NAMES AGL)
         if(WrapOpenGL_AGL)
             set(__opengl_agl_fw_path "${WrapOpenGL_AGL}")


mmm a/src/gui/text/qplatformfontdatabase.cpp
ppp b/src/gui/text/qplatformfontdatabase.cpp
@@ -361,9 +361,9 @@ QString QPlatformFontDatabase::fontDir() const
 {
     QString fontpath = QString::fromLocal8Bit(qgetenv("QT_QPA_FONTDIR"));
     if (fontpath.isEmpty())
-        fontpath = QLibraryInfo::path(QLibraryInfo::LibrariesPath) + "/fonts"_L1;
+        fontpath = QLibraryInfo::path(QLibraryInfo::LibrariesPath) + "/../share/system_fonts"_L1;
 
-    return fontpath;
+    return QDir::cleanPath(fontpath);
 }
 
 /*!
